"""
main_android_fixed.py
PE≈ÅNA wersja g≈Ç√≥wnego pliku dla Androida - WSZYSTKIE funkcje aktywne!
Obs≈Çuguje: telefon, samomodyfikacjƒô, dynamiczne modu≈Çy, bazƒô wiedzy, pamiƒôƒá, emocje
"""

import os
import sys
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.clock import Clock
from kivy.logger import Logger
from kivy.utils import platform

# Android-specific imports
if platform == 'android':
    try:
        from android.runnable import run_on_ui_thread
        from jnius import autoclass, cast
        from android import activity
        
        # Android classes
        PythonActivity = autoclass('org.kivy.android.PythonActivity')
        Intent = autoclass('android.content.Intent')
        PendingIntent = autoclass('android.app.PendingIntent')
        Logger.info("MAIN: Android imports successful")
    except Exception as e:
        Logger.warning(f"MAIN: Android imports failed: {e}")

# Bezpieczny import AIEngine - pr√≥buj najpierw wersjƒô Android, potem standardowƒÖ
AIEngine = None
try:
    from AIEngine_android import AIEngine
    Logger.info("MAIN: AIEngine_android loaded - PE≈ÅNA FUNKCJONALNO≈öƒÜ!")
except ImportError as e:
    Logger.warning(f"MAIN: AIEngine_android import failed: {e}")
    try:
        from AIEngine import AIEngine
        Logger.info("MAIN: Standardowy AIEngine loaded")
    except ImportError as e2:
        Logger.error(f"MAIN: Wszystkie AIEngine imports failed: {e2}")
        # Awaryjny AIEngine
        class AIEngine:
            def __init__(self):
                Logger.warning("MAIN: U≈ºywam awaryjnego AIEngine")
            
            def process_input(self, text):
                return f"ü§ñ NeuroQuantumAI (tryb awaryjny)\n\nOtrzymano: {text}\n\nSystem dzia≈Ça ale niekt√≥re modu≈Çy nie sƒÖ dostƒôpne."
            
            def get_status(self):
                return "‚ö†Ô∏è Tryb awaryjny - niekt√≥re funkcje niedostƒôpne"

class ChatBox(BoxLayout):
    """
    G≈Ç√≥wny widget czatu z PE≈ÅNƒÑ funkcjonalno≈õciƒÖ AI
    Obs≈Çuguje: wszystkie komendy telefonu, samomodyfikacjƒô, bazƒô wiedzy
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.engine = AIEngine()
        Logger.info("ChatBox: AIEngine zainicjalizowany")
        
        # Poka≈º status AI przy starcie
        try:
            status = self.engine.get_status()
            self.schedule_status_update(status)
        except:
            pass
        
        # Android-specific initialization
        if platform == 'android':
            self.setup_android()

    def schedule_status_update(self, status):
        """Zaktualizuj chat log po inicjalizacji widget√≥w"""
        def update_status(dt):
            try:
                current_text = self.ids.chat_log.text
                self.ids.chat_log.text = f"{current_text}\n\n{status}"
            except:
                pass
        Clock.schedule_once(update_status, 0.5)

    def setup_android(self):
        """
        Konfiguracja specyficzna dla Androida - zapobieganie minimalizowaniu
        """
        try:
            # Zabezpieczenie przed minimalizowaniem
            activity.bind(on_pause=self.on_android_pause)
            activity.bind(on_resume=self.on_android_resume)
            Logger.info("ChatBox: Android lifecycle bind successful")
        except Exception as e:
            Logger.error(f"ChatBox: Android setup error: {e}")

    def on_android_pause(self):
        """Obs≈Çuga pauzowania aplikacji"""
        Logger.info("ChatBox: Android app paused")
        return True  # Pozw√≥l na pauzƒô

    def on_android_resume(self):
        """Obs≈Çuga wznawiania aplikacji"""
        Logger.info("ChatBox: Android app resumed")

    def send_message(self):
        """
        PE≈ÅNA obs≈Çuga wysy≈Çania wiadomo≈õci - wszystkie funkcje AI!
        Obs≈Çuguje:
        - Telefon (zdjƒôcia, GPS, SMS, po≈ÇƒÖczenia)
        - Samomodyfikacjƒô kodu
        - Bazƒô wiedzy
        - Dynamiczne modu≈Çy
        - Wszystko inne!
        """
        user_text = self.ids.user_input.text.strip()
        if not user_text:
            return
            
        Logger.info(f"ChatBox: Processing: {user_text}")
        
        # Dodaj wiadomo≈õƒá u≈ºytkownika do logu
        self.ids.chat_log.text += f"\n\nüë§ TY: {user_text}"
        
        try:
            # === G≈Å√ìWNE PRZETWARZANIE PRZEZ AI ENGINE ===
            response = self.engine.process_input(user_text)
            
            # === FORMATOWANIE ODPOWIEDZI ===
            # Sprawd≈∫ typ komendy i dodaj ikony
            user_lower = user_text.lower()
            
            if any(kw in user_lower for kw in ["zr√≥b zdjƒôcie", "foto", "camera", "kamera"]):
                icon = "üì∏"
            elif any(kw in user_lower for kw in ["lokalizacja", "gps", "gdzie"]):
                icon = "üìç"
            elif any(kw in user_lower for kw in ["sms", "wiadomo≈õƒá"]):
                icon = "üí¨"
            elif any(kw in user_lower for kw in ["zadzwo≈Ñ", "call", "telefon"]):
                icon = "üìû"
            elif any(kw in user_lower for kw in ["modyfikuj", "edytuj", "zmie≈Ñ kod"]):
                icon = "üîß"
            elif any(kw in user_lower for kw in ["utw√≥rz modu≈Ç", "nowy modu≈Ç"]):
                icon = "‚öôÔ∏è"
            elif any(kw in user_lower for kw in ["status", "info", "informacje"]):
                icon = "ÔøΩ"
            elif any(kw in user_lower for kw in ["fizyka", "kwant", "nauka"]):
                icon = "üî¨"
            else:
                icon = "ü§ñ"
                
            # Dodaj odpowied≈∫ AI do logu
            self.ids.chat_log.text += f"\n{icon} AI: {response}"
            
        except Exception as e:
            Logger.error(f"ChatBox: AI processing error: {e}")
            import traceback
            traceback.print_exc()
            error_response = f"‚ùå B≈ÇƒÖd przetwarzania: {str(e)}\n\nAI dalej dzia≈Ça, spr√≥buj ponownie."
            self.ids.chat_log.text += f"\nü§ñ AI: {error_response}"

        # Wyczy≈õƒá pole input
        self.ids.user_input.text = ""
        
        Logger.info("ChatBox: Message processed successfully")
    
    def send(self):
        """Alias dla kompatybilno≈õci z .kv"""
        self.send_message()

class NeuroQuantumAIApp(App):
    """
    G≈Ç√≥wna klasa aplikacji - PE≈ÅNA FUNKCJONALNO≈öƒÜ
    """
    def build(self):
        Logger.info("App: Building interface")
        self.title = "NeuroQuantumAI"
        return ChatBox()

    def on_start(self):
        """Callback po starcie aplikacji"""
        Logger.info("App: Application started successfully!")
        Logger.info("App: WSZYSTKIE MODU≈ÅY ZA≈ÅADOWANE")
        
        if platform == 'android':
            self.setup_android_window()

    def setup_android_window(self):
        """
        Konfiguracja okna dla Androida
        """
        try:
            # Ustaw flagƒô aby aplikacja pozosta≈Ça aktywna
            from jnius import autoclass
            PythonActivity = autoclass('org.kivy.android.PythonActivity')
            WindowManager = autoclass('android.view.WindowManager$LayoutParams')
            
            activity = PythonActivity.mActivity
            window = activity.getWindow()
            
            # Dodaj flagi aby zapobiec minimalizowaniu
            window.addFlags(WindowManager.FLAG_KEEP_SCREEN_ON)
            window.addFlags(WindowManager.FLAG_SHOW_WHEN_LOCKED)
            window.addFlags(WindowManager.FLAG_TURN_SCREEN_ON)
            
            Logger.info("App: Android window flags set successfully")
        except Exception as e:
            Logger.error(f"App: Android window setup error: {e}")

    def on_pause(self):
        """
        Obs≈Çuga pauzowania aplikacji
        """
        Logger.info("App: Application paused")
        return True

    def on_resume(self):
        """
        Obs≈Çuga wznawiania aplikacji
        """
        Logger.info("App: Application resumed")

if __name__ == "__main__":
    Logger.info("="*60)
    Logger.info("  üß† NEUROQUANTUMAI - PE≈ÅNA WERSJA ANDROID üß†")
    Logger.info("="*60)
    Logger.info("  üì± Telefon: WSZYSTKIE funkcje")
    Logger.info("  üîß Samomodyfikacja: AKTYWNA")
    Logger.info("  üåê Baza wiedzy: ZA≈ÅADOWANA")
    Logger.info("  üìä Modu≈Çy dynamiczne: GOTOWE")
    Logger.info("="*60)
    
    try:
        NeuroQuantumAIApp().run()
    except Exception as e:
        Logger.critical(f"FATAL ERROR: {e}")
        import traceback
        traceback.print_exc()
